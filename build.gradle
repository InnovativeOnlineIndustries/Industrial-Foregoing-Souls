plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.moddev' version '1.0.20'
}

group = 'com.buuz135'
version = "${project.minecraft_version}-${project.mod_version}"

base {
    archivesName = 'industrial-foregoing-souls'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
neoForge {
    version = "${neo_version}"
    //accessTransformers.add(file('src/main/resources/META-INF/accesstransformer.cfg'))
    parchment {
        minecraftVersion = '1.21'
        mappingsVersion = '2024.07.28'
    }

    runs {
        client {
            client()
        }
        server {
            server()
        }
        data {
            data()
            programArguments.addAll '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }

    mods {
        industrialforegoing {
            sourceSet sourceSets.main
        }
    }

}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'jared maven'
        url "https://maven.blamejared.com/"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    repositories {
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
    }
    //maven { url 'https://modmaven.dev/' }
}

dependencies {
    compileOnly("mezz.jei:jei-1.21.1-neoforge-api:${jei_version}")
    runtimeOnly("mezz.jei:jei-1.21.1-neoforge:${jei_version}")
    implementation project.dependencies.create('com.hrznstudio:titanium:1.21-4.0.34')
    implementation project.dependencies.create('com.buuz135:industrialforegoing:1.21-3.6.35')
    implementation "vazkii.patchouli:Patchouli:${patchouli_version}"
    //compileOnly "dev.emi:emi-neoforge:${emi_version}:api"
    //runtimeOnly "dev.emi:emi-neoforge:${emi_version}"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
